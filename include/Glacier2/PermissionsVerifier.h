// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `PermissionsVerifier.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Glacier2_PermissionsVerifier_h__
#define __Glacier2_PermissionsVerifier_h__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <Glacier2/SSLInfo.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

#ifndef GLACIER2_API
#   ifdef GLACIER2_API_EXPORTS
#       define GLACIER2_API ICE_DECLSPEC_EXPORT
#   else
#       define GLACIER2_API ICE_DECLSPEC_IMPORT
#   endif
#endif

namespace IceProxy
{

namespace Glacier2
{

class PermissionsVerifier;

class SSLPermissionsVerifier;

}

}

namespace Glacier2
{

class PermissionsVerifier;
bool operator==(const PermissionsVerifier&, const PermissionsVerifier&);
bool operator<(const PermissionsVerifier&, const PermissionsVerifier&);

class SSLPermissionsVerifier;
bool operator==(const SSLPermissionsVerifier&, const SSLPermissionsVerifier&);
bool operator<(const SSLPermissionsVerifier&, const SSLPermissionsVerifier&);

}

namespace IceInternal
{

GLACIER2_API ::Ice::Object* upCast(::Glacier2::PermissionsVerifier*);
GLACIER2_API ::IceProxy::Ice::Object* upCast(::IceProxy::Glacier2::PermissionsVerifier*);

GLACIER2_API ::Ice::Object* upCast(::Glacier2::SSLPermissionsVerifier*);
GLACIER2_API ::IceProxy::Ice::Object* upCast(::IceProxy::Glacier2::SSLPermissionsVerifier*);

}

namespace Glacier2
{

typedef ::IceInternal::Handle< ::Glacier2::PermissionsVerifier> PermissionsVerifierPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Glacier2::PermissionsVerifier> PermissionsVerifierPrx;

GLACIER2_API void __read(::IceInternal::BasicStream*, PermissionsVerifierPrx&);
GLACIER2_API void __patch__PermissionsVerifierPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::Glacier2::SSLPermissionsVerifier> SSLPermissionsVerifierPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Glacier2::SSLPermissionsVerifier> SSLPermissionsVerifierPrx;

GLACIER2_API void __read(::IceInternal::BasicStream*, SSLPermissionsVerifierPrx&);
GLACIER2_API void __patch__SSLPermissionsVerifierPtr(void*, ::Ice::ObjectPtr&);

}

namespace Glacier2
{

class GLACIER2_API AMI_PermissionsVerifier_checkPermissions : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(bool, const ::std::string&) = 0;

    void __response(bool __ret, const ::std::string& reason)
    {
        ice_response(__ret, reason);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        AMICallbackBase::__sent(sentSynchronously);
#else
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
#endif
    }
};

typedef ::IceUtil::Handle< ::Glacier2::AMI_PermissionsVerifier_checkPermissions> AMI_PermissionsVerifier_checkPermissionsPtr;

class GLACIER2_API AMI_SSLPermissionsVerifier_authorize : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(bool, const ::std::string&) = 0;

    void __response(bool __ret, const ::std::string& reason)
    {
        ice_response(__ret, reason);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        AMICallbackBase::__sent(sentSynchronously);
#else
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
#endif
    }
};

typedef ::IceUtil::Handle< ::Glacier2::AMI_SSLPermissionsVerifier_authorize> AMI_SSLPermissionsVerifier_authorizePtr;

}

namespace Glacier2
{

class Callback_PermissionsVerifier_checkPermissions_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PermissionsVerifier_checkPermissions_Base> Callback_PermissionsVerifier_checkPermissionsPtr;

class Callback_SSLPermissionsVerifier_authorize_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SSLPermissionsVerifier_authorize_Base> Callback_SSLPermissionsVerifier_authorizePtr;

}

namespace IceProxy
{

namespace Glacier2
{

class PermissionsVerifier : virtual public ::IceProxy::Ice::Object
{
public:

    bool checkPermissions(const ::std::string& userId, const ::std::string& password, ::std::string& reason)
    {
        return checkPermissions(userId, password, reason, 0);
    }
    bool checkPermissions(const ::std::string& userId, const ::std::string& password, ::std::string& reason, const ::Ice::Context& __ctx)
    {
        return checkPermissions(userId, password, reason, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_checkPermissions(const ::std::string& userId, const ::std::string& password)
    {
        return begin_checkPermissions(userId, password, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_checkPermissions(const ::std::string& userId, const ::std::string& password, const ::Ice::Context& __ctx)
    {
        return begin_checkPermissions(userId, password, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_checkPermissions(const ::std::string& userId, const ::std::string& password, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_checkPermissions(userId, password, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_checkPermissions(const ::std::string& userId, const ::std::string& password, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_checkPermissions(userId, password, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_checkPermissions(const ::std::string& userId, const ::std::string& password, const ::Glacier2::Callback_PermissionsVerifier_checkPermissionsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_checkPermissions(userId, password, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_checkPermissions(const ::std::string& userId, const ::std::string& password, const ::Ice::Context& __ctx, const ::Glacier2::Callback_PermissionsVerifier_checkPermissionsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_checkPermissions(userId, password, &__ctx, __del, __cookie);
    }

    GLACIER2_API bool end_checkPermissions(::std::string& reason, const ::Ice::AsyncResultPtr&);
    
private:

    GLACIER2_API bool checkPermissions(const ::std::string&, const ::std::string&, ::std::string&, const ::Ice::Context*);
    GLACIER2_API ::Ice::AsyncResultPtr begin_checkPermissions(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    GLACIER2_API bool checkPermissions_async(const ::Glacier2::AMI_PermissionsVerifier_checkPermissionsPtr&, const ::std::string&, const ::std::string&);
    GLACIER2_API bool checkPermissions_async(const ::Glacier2::AMI_PermissionsVerifier_checkPermissionsPtr&, const ::std::string&, const ::std::string&, const ::Ice::Context&);
    
    ::IceInternal::ProxyHandle<PermissionsVerifier> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<PermissionsVerifier*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<PermissionsVerifier*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<PermissionsVerifier> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<PermissionsVerifier*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<PermissionsVerifier*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<PermissionsVerifier> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<PermissionsVerifier*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<PermissionsVerifier*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<PermissionsVerifier> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<PermissionsVerifier*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<PermissionsVerifier*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<PermissionsVerifier> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<PermissionsVerifier*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<PermissionsVerifier*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<PermissionsVerifier> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<PermissionsVerifier*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<PermissionsVerifier*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<PermissionsVerifier> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<PermissionsVerifier*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<PermissionsVerifier*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<PermissionsVerifier> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<PermissionsVerifier*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<PermissionsVerifier*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<PermissionsVerifier> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<PermissionsVerifier*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<PermissionsVerifier*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<PermissionsVerifier> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<PermissionsVerifier*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<PermissionsVerifier*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<PermissionsVerifier> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<PermissionsVerifier*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<PermissionsVerifier*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<PermissionsVerifier> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<PermissionsVerifier*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<PermissionsVerifier*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<PermissionsVerifier> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<PermissionsVerifier*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<PermissionsVerifier*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<PermissionsVerifier> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<PermissionsVerifier*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<PermissionsVerifier*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<PermissionsVerifier> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<PermissionsVerifier*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<PermissionsVerifier*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<PermissionsVerifier> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<PermissionsVerifier*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<PermissionsVerifier*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<PermissionsVerifier> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<PermissionsVerifier*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<PermissionsVerifier*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<PermissionsVerifier> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<PermissionsVerifier*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<PermissionsVerifier*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<PermissionsVerifier> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<PermissionsVerifier*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<PermissionsVerifier*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    GLACIER2_API static const ::std::string& ice_staticId();

private: 

    GLACIER2_API virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    GLACIER2_API virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    GLACIER2_API virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class SSLPermissionsVerifier : virtual public ::IceProxy::Ice::Object
{
public:

    bool authorize(const ::Glacier2::SSLInfo& info, ::std::string& reason)
    {
        return authorize(info, reason, 0);
    }
    bool authorize(const ::Glacier2::SSLInfo& info, ::std::string& reason, const ::Ice::Context& __ctx)
    {
        return authorize(info, reason, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_authorize(const ::Glacier2::SSLInfo& info)
    {
        return begin_authorize(info, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_authorize(const ::Glacier2::SSLInfo& info, const ::Ice::Context& __ctx)
    {
        return begin_authorize(info, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_authorize(const ::Glacier2::SSLInfo& info, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_authorize(info, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_authorize(const ::Glacier2::SSLInfo& info, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_authorize(info, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_authorize(const ::Glacier2::SSLInfo& info, const ::Glacier2::Callback_SSLPermissionsVerifier_authorizePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_authorize(info, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_authorize(const ::Glacier2::SSLInfo& info, const ::Ice::Context& __ctx, const ::Glacier2::Callback_SSLPermissionsVerifier_authorizePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_authorize(info, &__ctx, __del, __cookie);
    }

    GLACIER2_API bool end_authorize(::std::string& reason, const ::Ice::AsyncResultPtr&);
    
private:

    GLACIER2_API bool authorize(const ::Glacier2::SSLInfo&, ::std::string&, const ::Ice::Context*);
    GLACIER2_API ::Ice::AsyncResultPtr begin_authorize(const ::Glacier2::SSLInfo&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    GLACIER2_API bool authorize_async(const ::Glacier2::AMI_SSLPermissionsVerifier_authorizePtr&, const ::Glacier2::SSLInfo&);
    GLACIER2_API bool authorize_async(const ::Glacier2::AMI_SSLPermissionsVerifier_authorizePtr&, const ::Glacier2::SSLInfo&, const ::Ice::Context&);
    
    ::IceInternal::ProxyHandle<SSLPermissionsVerifier> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SSLPermissionsVerifier*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<SSLPermissionsVerifier*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SSLPermissionsVerifier> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SSLPermissionsVerifier*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<SSLPermissionsVerifier*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SSLPermissionsVerifier> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SSLPermissionsVerifier*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<SSLPermissionsVerifier*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SSLPermissionsVerifier> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SSLPermissionsVerifier*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<SSLPermissionsVerifier*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SSLPermissionsVerifier> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SSLPermissionsVerifier*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<SSLPermissionsVerifier*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SSLPermissionsVerifier> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SSLPermissionsVerifier*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<SSLPermissionsVerifier*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SSLPermissionsVerifier> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SSLPermissionsVerifier*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<SSLPermissionsVerifier*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SSLPermissionsVerifier> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SSLPermissionsVerifier*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<SSLPermissionsVerifier*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SSLPermissionsVerifier> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SSLPermissionsVerifier*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<SSLPermissionsVerifier*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SSLPermissionsVerifier> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SSLPermissionsVerifier*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<SSLPermissionsVerifier*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SSLPermissionsVerifier> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SSLPermissionsVerifier*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<SSLPermissionsVerifier*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SSLPermissionsVerifier> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SSLPermissionsVerifier*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<SSLPermissionsVerifier*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SSLPermissionsVerifier> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SSLPermissionsVerifier*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<SSLPermissionsVerifier*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SSLPermissionsVerifier> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SSLPermissionsVerifier*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<SSLPermissionsVerifier*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SSLPermissionsVerifier> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SSLPermissionsVerifier*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<SSLPermissionsVerifier*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SSLPermissionsVerifier> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SSLPermissionsVerifier*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<SSLPermissionsVerifier*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SSLPermissionsVerifier> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SSLPermissionsVerifier*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<SSLPermissionsVerifier*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SSLPermissionsVerifier> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SSLPermissionsVerifier*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<SSLPermissionsVerifier*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SSLPermissionsVerifier> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SSLPermissionsVerifier*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<SSLPermissionsVerifier*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    GLACIER2_API static const ::std::string& ice_staticId();

private: 

    GLACIER2_API virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    GLACIER2_API virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    GLACIER2_API virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace Glacier2
{

class GLACIER2_API PermissionsVerifier : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual bool checkPermissions(const ::std::string&, const ::std::string&, ::std::string&, const ::Ice::Context*) = 0;
};

class GLACIER2_API SSLPermissionsVerifier : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual bool authorize(const ::Glacier2::SSLInfo&, ::std::string&, const ::Ice::Context*) = 0;
};

}

}

namespace IceDelegateM
{

namespace Glacier2
{

class GLACIER2_API PermissionsVerifier : virtual public ::IceDelegate::Glacier2::PermissionsVerifier,
                                         virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual bool checkPermissions(const ::std::string&, const ::std::string&, ::std::string&, const ::Ice::Context*);
};

class GLACIER2_API SSLPermissionsVerifier : virtual public ::IceDelegate::Glacier2::SSLPermissionsVerifier,
                                            virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual bool authorize(const ::Glacier2::SSLInfo&, ::std::string&, const ::Ice::Context*);
};

}

}

namespace IceDelegateD
{

namespace Glacier2
{

class GLACIER2_API PermissionsVerifier : virtual public ::IceDelegate::Glacier2::PermissionsVerifier,
                                         virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual bool checkPermissions(const ::std::string&, const ::std::string&, ::std::string&, const ::Ice::Context*);
};

class GLACIER2_API SSLPermissionsVerifier : virtual public ::IceDelegate::Glacier2::SSLPermissionsVerifier,
                                            virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual bool authorize(const ::Glacier2::SSLInfo&, ::std::string&, const ::Ice::Context*);
};

}

}

namespace Glacier2
{

class GLACIER2_API PermissionsVerifier : virtual public ::Ice::Object
{
public:

    typedef PermissionsVerifierPrx ProxyType;
    typedef PermissionsVerifierPtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual bool checkPermissions(const ::std::string&, const ::std::string&, ::std::string&, const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___checkPermissions(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const PermissionsVerifier& l, const PermissionsVerifier& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const PermissionsVerifier& l, const PermissionsVerifier& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class GLACIER2_API SSLPermissionsVerifier : virtual public ::Ice::Object
{
public:

    typedef SSLPermissionsVerifierPrx ProxyType;
    typedef SSLPermissionsVerifierPtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual bool authorize(const ::Glacier2::SSLInfo&, ::std::string&, const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___authorize(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const SSLPermissionsVerifier& l, const SSLPermissionsVerifier& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const SSLPermissionsVerifier& l, const SSLPermissionsVerifier& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Glacier2
{

template<class T>
class CallbackNC_PermissionsVerifier_checkPermissions : public Callback_PermissionsVerifier_checkPermissions_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const ::std::string&);

    CallbackNC_PermissionsVerifier_checkPermissions(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Glacier2::PermissionsVerifierPrx __proxy = ::Glacier2::PermissionsVerifierPrx::uncheckedCast(__result->getProxy());
        ::std::string reason;
        bool __ret;
        try
        {
            __ret = __proxy->end_checkPermissions(reason, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, reason);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, reason);
#endif
        }
    }

    Response response;
};

template<class T> Callback_PermissionsVerifier_checkPermissionsPtr
newCallback_PermissionsVerifier_checkPermissions(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PermissionsVerifier_checkPermissions<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PermissionsVerifier_checkPermissionsPtr
newCallback_PermissionsVerifier_checkPermissions(T* instance, void (T::*cb)(bool, const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PermissionsVerifier_checkPermissions<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PermissionsVerifier_checkPermissions : public Callback_PermissionsVerifier_checkPermissions_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const ::std::string&, const CT&);

    Callback_PermissionsVerifier_checkPermissions(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Glacier2::PermissionsVerifierPrx __proxy = ::Glacier2::PermissionsVerifierPrx::uncheckedCast(__result->getProxy());
        ::std::string reason;
        bool __ret;
        try
        {
            __ret = __proxy->end_checkPermissions(reason, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, reason, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, reason, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PermissionsVerifier_checkPermissionsPtr
newCallback_PermissionsVerifier_checkPermissions(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PermissionsVerifier_checkPermissions<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PermissionsVerifier_checkPermissionsPtr
newCallback_PermissionsVerifier_checkPermissions(T* instance, void (T::*cb)(bool, const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PermissionsVerifier_checkPermissions<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SSLPermissionsVerifier_authorize : public Callback_SSLPermissionsVerifier_authorize_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const ::std::string&);

    CallbackNC_SSLPermissionsVerifier_authorize(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Glacier2::SSLPermissionsVerifierPrx __proxy = ::Glacier2::SSLPermissionsVerifierPrx::uncheckedCast(__result->getProxy());
        ::std::string reason;
        bool __ret;
        try
        {
            __ret = __proxy->end_authorize(reason, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, reason);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, reason);
#endif
        }
    }

    Response response;
};

template<class T> Callback_SSLPermissionsVerifier_authorizePtr
newCallback_SSLPermissionsVerifier_authorize(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SSLPermissionsVerifier_authorize<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SSLPermissionsVerifier_authorizePtr
newCallback_SSLPermissionsVerifier_authorize(T* instance, void (T::*cb)(bool, const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SSLPermissionsVerifier_authorize<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SSLPermissionsVerifier_authorize : public Callback_SSLPermissionsVerifier_authorize_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const ::std::string&, const CT&);

    Callback_SSLPermissionsVerifier_authorize(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Glacier2::SSLPermissionsVerifierPrx __proxy = ::Glacier2::SSLPermissionsVerifierPrx::uncheckedCast(__result->getProxy());
        ::std::string reason;
        bool __ret;
        try
        {
            __ret = __proxy->end_authorize(reason, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, reason, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, reason, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SSLPermissionsVerifier_authorizePtr
newCallback_SSLPermissionsVerifier_authorize(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SSLPermissionsVerifier_authorize<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SSLPermissionsVerifier_authorizePtr
newCallback_SSLPermissionsVerifier_authorize(T* instance, void (T::*cb)(bool, const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SSLPermissionsVerifier_authorize<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
