// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `callserver.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <callserver.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

static const ::std::string __transfer__CallServer__SendMsg_name = "SendMsg";

static const ::std::string __transfer__CallServer__QueryMsg_name = "QueryMsg";

static const ::std::string __transfer__CallServer__ServerStatistic_name = "ServerStatistic";

::Ice::Object* IceInternal::upCast(::transfer::CallServer* p) { return p; }
::IceProxy::Ice::Object* IceInternal::upCast(::IceProxy::transfer::CallServer* p) { return p; }

void
transfer::__read(::IceInternal::BasicStream* __is, ::transfer::CallServerPrx& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::transfer::CallServer;
        v->__copyFrom(proxy);
    }
}

transfer::CallException::CallException(const ::std::string& __ice_reason) :
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    UserException(),
#else
    ::Ice::UserException(),
#endif
    reason(__ice_reason)
{
}

transfer::CallException::~CallException() throw()
{
}

static const char* __transfer__CallException_name = "transfer::CallException";

::std::string
transfer::CallException::ice_name() const
{
    return __transfer__CallException_name;
}

::Ice::Exception*
transfer::CallException::ice_clone() const
{
    return new CallException(*this);
}

void
transfer::CallException::ice_throw() const
{
    throw *this;
}

void
transfer::CallException::__write(::IceInternal::BasicStream* __os) const
{
    __os->write(::std::string("::transfer::CallException"), false);
    __os->startWriteSlice();
    __os->write(reason);
    __os->endWriteSlice();
}

void
transfer::CallException::__read(::IceInternal::BasicStream* __is, bool __rid)
{
    if(__rid)
    {
        ::std::string myId;
        __is->read(myId, false);
    }
    __is->startReadSlice();
    __is->read(reason);
    __is->endReadSlice();
}

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
void
transfer::CallException::__write(const ::Ice::OutputStreamPtr&) const
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "exception transfer::CallException was not generated with stream support";
    throw ex;
}

void
transfer::CallException::__read(const ::Ice::InputStreamPtr&, bool)
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "exception transfer::CallException was not generated with stream support";
    throw ex;
}
#endif

struct __F__transfer__CallException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow()
    {
        throw ::transfer::CallException();
    }
};

static ::IceInternal::UserExceptionFactoryPtr __F__transfer__CallException__Ptr = new __F__transfer__CallException;

const ::IceInternal::UserExceptionFactoryPtr&
transfer::CallException::ice_factory()
{
    return __F__transfer__CallException__Ptr;
}

class __F__transfer__CallException__Init
{
public:

    __F__transfer__CallException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::transfer::CallException", ::transfer::CallException::ice_factory());
    }

    ~__F__transfer__CallException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::transfer::CallException");
    }
};

static __F__transfer__CallException__Init __F__transfer__CallException__i;

#ifdef __APPLE__
extern "C" { void __F__transfer__CallException__initializer() {} }
#endif

void
transfer::RequestProtocol::__write(::IceInternal::BasicStream* __os) const
{
    __os->write(requestCode);
    __os->write(serviceCode);
    __os->write(internalID);
    __os->write(status);
    __os->write(sessionID);
    if(data.size() == 0)
    {
        __os->writeSize(0);
    }
    else
    {
        __os->write(&data[0], &data[0] + data.size());
    }
    if(bindata.size() == 0)
    {
        __os->writeSize(0);
    }
    else
    {
        __os->write(&bindata[0], &bindata[0] + bindata.size());
    }
}

void
transfer::RequestProtocol::__read(::IceInternal::BasicStream* __is)
{
    __is->read(requestCode);
    __is->read(serviceCode);
    __is->read(internalID);
    __is->read(status);
    __is->read(sessionID);
    ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*> ___data;
    __is->read(___data);
    ::std::vector< ::Ice::Byte>(___data.first, ___data.second).swap(data);
    ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*> ___bindata;
    __is->read(___bindata);
    ::std::vector< ::Ice::Byte>(___bindata.first, ___bindata.second).swap(bindata);
}

void
transfer::ResponseProtocol::__write(::IceInternal::BasicStream* __os) const
{
    __os->write(requestCode);
    __os->write(serviceCode);
    __os->write(internalID);
    __os->write(status);
    __os->write(returnCode);
    __os->write(returnMessage);
    __os->write(sessionID);
    if(data.size() == 0)
    {
        __os->writeSize(0);
    }
    else
    {
        __os->write(&data[0], &data[0] + data.size());
    }
    if(bindata.size() == 0)
    {
        __os->writeSize(0);
    }
    else
    {
        __os->write(&bindata[0], &bindata[0] + bindata.size());
    }
}

void
transfer::ResponseProtocol::__read(::IceInternal::BasicStream* __is)
{
    __is->read(requestCode);
    __is->read(serviceCode);
    __is->read(internalID);
    __is->read(status);
    __is->read(returnCode);
    __is->read(returnMessage);
    __is->read(sessionID);
    ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*> ___data;
    __is->read(___data);
    ::std::vector< ::Ice::Byte>(___data.first, ___data.second).swap(data);
    ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*> ___bindata;
    __is->read(___bindata);
    ::std::vector< ::Ice::Byte>(___bindata.first, ___bindata.second).swap(bindata);
}

IceAsync::transfer::AMD_CallServer_SendMsg::AMD_CallServer_SendMsg(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::transfer::AMD_CallServer_SendMsg::ice_response(const ::transfer::ResponseProtocol& __ret)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = this->__os();
            __ret.__write(__os);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response(true);
    }
}

void
IceAsync::transfer::AMD_CallServer_SendMsg::ice_exception(const ::std::exception& ex)
{
    if(const ::transfer::CallException* __ex = dynamic_cast<const ::transfer::CallException*>(&ex))
    {
        if(__validateResponse(false))
        {
            __os()->write(*__ex);
            __response(false);
        }
    }
    else
    {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        IncomingAsync::ice_exception(ex);
#else
        ::IceInternal::IncomingAsync::ice_exception(ex);
#endif
    }
}

IceAsync::transfer::AMD_CallServer_QueryMsg::AMD_CallServer_QueryMsg(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::transfer::AMD_CallServer_QueryMsg::ice_response(const ::transfer::ResponseProtocol& __ret)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = this->__os();
            __ret.__write(__os);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response(true);
    }
}

void
IceAsync::transfer::AMD_CallServer_QueryMsg::ice_exception(const ::std::exception& ex)
{
    if(const ::transfer::CallException* __ex = dynamic_cast<const ::transfer::CallException*>(&ex))
    {
        if(__validateResponse(false))
        {
            __os()->write(*__ex);
            __response(false);
        }
    }
    else
    {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        IncomingAsync::ice_exception(ex);
#else
        ::IceInternal::IncomingAsync::ice_exception(ex);
#endif
    }
}

::transfer::ResponseProtocol
IceProxy::transfer::CallServer::SendMsg(const ::transfer::RequestProtocol& req, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__transfer__CallServer__SendMsg_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::transfer::CallServer* __del = dynamic_cast< ::IceDelegate::transfer::CallServer*>(__delBase.get());
            return __del->SendMsg(req, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::transfer::CallServer::begin_SendMsg(const ::transfer::RequestProtocol& req, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__transfer__CallServer__SendMsg_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __transfer__CallServer__SendMsg_name, __del, __cookie);
    try
    {
        __result->__prepare(__transfer__CallServer__SendMsg_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        req.__write(__os);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::transfer::ResponseProtocol
IceProxy::transfer::CallServer::end_SendMsg(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __transfer__CallServer__SendMsg_name);
    ::transfer::ResponseProtocol __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::transfer::CallException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __ret.__read(__is);
    __is->endReadEncaps();
    return __ret;
}

::transfer::ResponseProtocol
IceProxy::transfer::CallServer::QueryMsg(const ::transfer::RequestProtocol& req, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__transfer__CallServer__QueryMsg_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::transfer::CallServer* __del = dynamic_cast< ::IceDelegate::transfer::CallServer*>(__delBase.get());
            return __del->QueryMsg(req, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::transfer::CallServer::begin_QueryMsg(const ::transfer::RequestProtocol& req, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__transfer__CallServer__QueryMsg_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __transfer__CallServer__QueryMsg_name, __del, __cookie);
    try
    {
        __result->__prepare(__transfer__CallServer__QueryMsg_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        req.__write(__os);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::transfer::ResponseProtocol
IceProxy::transfer::CallServer::end_QueryMsg(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __transfer__CallServer__QueryMsg_name);
    ::transfer::ResponseProtocol __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::transfer::CallException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __ret.__read(__is);
    __is->endReadEncaps();
    return __ret;
}

::transfer::ByteSeq
IceProxy::transfer::CallServer::ServerStatistic(const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__transfer__CallServer__ServerStatistic_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::transfer::CallServer* __del = dynamic_cast< ::IceDelegate::transfer::CallServer*>(__delBase.get());
            return __del->ServerStatistic(__ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::transfer::CallServer::begin_ServerStatistic(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__transfer__CallServer__ServerStatistic_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __transfer__CallServer__ServerStatistic_name, __del, __cookie);
    try
    {
        __result->__prepare(__transfer__CallServer__ServerStatistic_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::transfer::ByteSeq
IceProxy::transfer::CallServer::end_ServerStatistic(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __transfer__CallServer__ServerStatistic_name);
    ::transfer::ByteSeq __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::transfer::CallException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*> _____ret;
    __is->read(_____ret);
    ::std::vector< ::Ice::Byte>(_____ret.first, _____ret.second).swap(__ret);
    __is->endReadEncaps();
    return __ret;
}

const ::std::string&
IceProxy::transfer::CallServer::ice_staticId()
{
    return ::transfer::CallServer::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::transfer::CallServer::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::transfer::CallServer);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::transfer::CallServer::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::transfer::CallServer);
}

::IceProxy::Ice::Object*
IceProxy::transfer::CallServer::__newInstance() const
{
    return new CallServer;
}

::transfer::ResponseProtocol
IceDelegateM::transfer::CallServer::SendMsg(const ::transfer::RequestProtocol& req, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __transfer__CallServer__SendMsg_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        req.__write(__os);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::transfer::ResponseProtocol __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::transfer::CallException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __ret.__read(__is);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::transfer::ResponseProtocol
IceDelegateM::transfer::CallServer::QueryMsg(const ::transfer::RequestProtocol& req, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __transfer__CallServer__QueryMsg_name, ::Ice::Idempotent, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        req.__write(__os);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::transfer::ResponseProtocol __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::transfer::CallException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __ret.__read(__is);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::transfer::ByteSeq
IceDelegateM::transfer::CallServer::ServerStatistic(const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __transfer__CallServer__ServerStatistic_name, ::Ice::Normal, __context);
    bool __ok = __og.invoke();
    ::transfer::ByteSeq __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::transfer::CallException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*> _____ret;
        __is->read(_____ret);
        ::std::vector< ::Ice::Byte>(_____ret.first, _____ret.second).swap(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::transfer::ResponseProtocol
IceDelegateD::transfer::CallServer::SendMsg(const ::transfer::RequestProtocol&, const ::Ice::Context*)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
    return ::transfer::ResponseProtocol(); // to avoid a warning with some compilers;
}

::transfer::ResponseProtocol
IceDelegateD::transfer::CallServer::QueryMsg(const ::transfer::RequestProtocol&, const ::Ice::Context*)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
    return ::transfer::ResponseProtocol(); // to avoid a warning with some compilers;
}

::transfer::ByteSeq
IceDelegateD::transfer::CallServer::ServerStatistic(const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::transfer::ByteSeq& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::transfer::CallServer* servant = dynamic_cast< ::transfer::CallServer*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->ServerStatistic(_current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::transfer::ByteSeq& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __transfer__CallServer__ServerStatistic_name, ::Ice::Normal, __context);
    ::transfer::ByteSeq __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::transfer::CallException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::ObjectPtr
transfer::CallServer::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

static const ::std::string __transfer__CallServer_ids[2] =
{
    "::Ice::Object",
    "::transfer::CallServer"
};

bool
transfer::CallServer::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__transfer__CallServer_ids, __transfer__CallServer_ids + 2, _s);
}

::std::vector< ::std::string>
transfer::CallServer::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__transfer__CallServer_ids[0], &__transfer__CallServer_ids[2]);
}

const ::std::string&
transfer::CallServer::ice_id(const ::Ice::Current&) const
{
    return __transfer__CallServer_ids[1];
}

const ::std::string&
transfer::CallServer::ice_staticId()
{
    return __transfer__CallServer_ids[1];
}

::Ice::DispatchStatus
transfer::CallServer::___SendMsg(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::transfer::RequestProtocol req;
    req.__read(__is);
    __is->endReadEncaps();
    ::transfer::AMD_CallServer_SendMsgPtr __cb = new IceAsync::transfer::AMD_CallServer_SendMsg(__inS);
    try
    {
        SendMsg_async(__cb, req, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
transfer::CallServer::___QueryMsg(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::transfer::RequestProtocol req;
    req.__read(__is);
    __is->endReadEncaps();
    ::transfer::AMD_CallServer_QueryMsgPtr __cb = new IceAsync::transfer::AMD_CallServer_QueryMsg(__inS);
    try
    {
        QueryMsg_async(__cb, req, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
transfer::CallServer::___ServerStatistic(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.is()->skipEmptyEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    try
    {
        ::transfer::ByteSeq __ret = ServerStatistic(__current);
        if(__ret.size() == 0)
        {
            __os->writeSize(0);
        }
        else
        {
            __os->write(&__ret[0], &__ret[0] + __ret.size());
        }
    }
    catch(const ::transfer::CallException& __ex)
    {
        __os->write(__ex);
        return ::Ice::DispatchUserException;
    }
    return ::Ice::DispatchOK;
}

static ::std::string __transfer__CallServer_all[] =
{
    "QueryMsg",
    "SendMsg",
    "ServerStatistic",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

::Ice::DispatchStatus
transfer::CallServer::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< ::std::string*, ::std::string*> r = ::std::equal_range(__transfer__CallServer_all, __transfer__CallServer_all + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __transfer__CallServer_all)
    {
        case 0:
        {
            return ___QueryMsg(in, current);
        }
        case 1:
        {
            return ___SendMsg(in, current);
        }
        case 2:
        {
            return ___ServerStatistic(in, current);
        }
        case 3:
        {
            return ___ice_id(in, current);
        }
        case 4:
        {
            return ___ice_ids(in, current);
        }
        case 5:
        {
            return ___ice_isA(in, current);
        }
        case 6:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
transfer::CallServer::__write(::IceInternal::BasicStream* __os) const
{
    __os->writeTypeId(ice_staticId());
    __os->startWriteSlice();
    __os->endWriteSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__write(__os);
#else
    ::Ice::Object::__write(__os);
#endif
}

void
transfer::CallServer::__read(::IceInternal::BasicStream* __is, bool __rid)
{
    if(__rid)
    {
        ::std::string myId;
        __is->readTypeId(myId);
    }
    __is->startReadSlice();
    __is->endReadSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__read(__is, true);
#else
    ::Ice::Object::__read(__is, true);
#endif
}

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
void
transfer::CallServer::__write(const ::Ice::OutputStreamPtr&) const
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type transfer::CallServer was not generated with stream support";
    throw ex;
}

void
transfer::CallServer::__read(const ::Ice::InputStreamPtr&, bool)
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type transfer::CallServer was not generated with stream support";
    throw ex;
}
#endif

void 
transfer::__patch__CallServerPtr(void* __addr, ::Ice::ObjectPtr& v)
{
    ::transfer::CallServerPtr* p = static_cast< ::transfer::CallServerPtr*>(__addr);
    assert(p);
    *p = ::transfer::CallServerPtr::dynamicCast(v);
    if(v && !*p)
    {
        IceInternal::Ex::throwUOE(::transfer::CallServer::ice_staticId(), v->ice_id());
    }
}
