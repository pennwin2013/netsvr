// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `callserver.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __D__Penn_ClonePrjs_20140102_netsvr_netsvr_src_callserver_h__
#define __D__Penn_ClonePrjs_20140102_netsvr_netsvr_src_callserver_h__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace transfer
{

class CallServer;

}

}

namespace transfer
{

class CallServer;
bool operator==(const CallServer&, const CallServer&);
bool operator<(const CallServer&, const CallServer&);

}

namespace IceInternal
{

::Ice::Object* upCast(::transfer::CallServer*);
::IceProxy::Ice::Object* upCast(::IceProxy::transfer::CallServer*);

}

namespace transfer
{

typedef ::IceInternal::Handle< ::transfer::CallServer> CallServerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::transfer::CallServer> CallServerPrx;

void __read(::IceInternal::BasicStream*, CallServerPrx&);
void __patch__CallServerPtr(void*, ::Ice::ObjectPtr&);

}

namespace transfer
{

class CallException : public ::Ice::UserException
{
public:

    CallException() {}
    explicit CallException(const ::std::string&);
    virtual ~CallException() throw();

    virtual ::std::string ice_name() const;
    virtual ::Ice::Exception* ice_clone() const;
    virtual void ice_throw() const;

    static const ::IceInternal::UserExceptionFactoryPtr& ice_factory();

    ::std::string reason;

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

static CallException __CallException_init;

typedef ::std::vector< ::Ice::Byte> ByteSeq;

struct RequestProtocol
{
    ::Ice::Int requestCode;
    ::Ice::Short serviceCode;
    ::Ice::Short internalID;
    ::Ice::Int status;
    ::std::string sessionID;
    ::transfer::ByteSeq data;
    ::transfer::ByteSeq bindata;

    bool operator==(const RequestProtocol& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(requestCode != __rhs.requestCode)
        {
            return false;
        }
        if(serviceCode != __rhs.serviceCode)
        {
            return false;
        }
        if(internalID != __rhs.internalID)
        {
            return false;
        }
        if(status != __rhs.status)
        {
            return false;
        }
        if(sessionID != __rhs.sessionID)
        {
            return false;
        }
        if(data != __rhs.data)
        {
            return false;
        }
        if(bindata != __rhs.bindata)
        {
            return false;
        }
        return true;
    }

    bool operator<(const RequestProtocol& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(requestCode < __rhs.requestCode)
        {
            return true;
        }
        else if(__rhs.requestCode < requestCode)
        {
            return false;
        }
        if(serviceCode < __rhs.serviceCode)
        {
            return true;
        }
        else if(__rhs.serviceCode < serviceCode)
        {
            return false;
        }
        if(internalID < __rhs.internalID)
        {
            return true;
        }
        else if(__rhs.internalID < internalID)
        {
            return false;
        }
        if(status < __rhs.status)
        {
            return true;
        }
        else if(__rhs.status < status)
        {
            return false;
        }
        if(sessionID < __rhs.sessionID)
        {
            return true;
        }
        else if(__rhs.sessionID < sessionID)
        {
            return false;
        }
        if(data < __rhs.data)
        {
            return true;
        }
        else if(__rhs.data < data)
        {
            return false;
        }
        if(bindata < __rhs.bindata)
        {
            return true;
        }
        else if(__rhs.bindata < bindata)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const RequestProtocol& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const RequestProtocol& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const RequestProtocol& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const RequestProtocol& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

struct ResponseProtocol
{
    ::Ice::Int requestCode;
    ::Ice::Short serviceCode;
    ::Ice::Short internalID;
    ::Ice::Int status;
    ::Ice::Int returnCode;
    ::std::string returnMessage;
    ::std::string sessionID;
    ::transfer::ByteSeq data;
    ::transfer::ByteSeq bindata;

    bool operator==(const ResponseProtocol& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(requestCode != __rhs.requestCode)
        {
            return false;
        }
        if(serviceCode != __rhs.serviceCode)
        {
            return false;
        }
        if(internalID != __rhs.internalID)
        {
            return false;
        }
        if(status != __rhs.status)
        {
            return false;
        }
        if(returnCode != __rhs.returnCode)
        {
            return false;
        }
        if(returnMessage != __rhs.returnMessage)
        {
            return false;
        }
        if(sessionID != __rhs.sessionID)
        {
            return false;
        }
        if(data != __rhs.data)
        {
            return false;
        }
        if(bindata != __rhs.bindata)
        {
            return false;
        }
        return true;
    }

    bool operator<(const ResponseProtocol& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(requestCode < __rhs.requestCode)
        {
            return true;
        }
        else if(__rhs.requestCode < requestCode)
        {
            return false;
        }
        if(serviceCode < __rhs.serviceCode)
        {
            return true;
        }
        else if(__rhs.serviceCode < serviceCode)
        {
            return false;
        }
        if(internalID < __rhs.internalID)
        {
            return true;
        }
        else if(__rhs.internalID < internalID)
        {
            return false;
        }
        if(status < __rhs.status)
        {
            return true;
        }
        else if(__rhs.status < status)
        {
            return false;
        }
        if(returnCode < __rhs.returnCode)
        {
            return true;
        }
        else if(__rhs.returnCode < returnCode)
        {
            return false;
        }
        if(returnMessage < __rhs.returnMessage)
        {
            return true;
        }
        else if(__rhs.returnMessage < returnMessage)
        {
            return false;
        }
        if(sessionID < __rhs.sessionID)
        {
            return true;
        }
        else if(__rhs.sessionID < sessionID)
        {
            return false;
        }
        if(data < __rhs.data)
        {
            return true;
        }
        else if(__rhs.data < data)
        {
            return false;
        }
        if(bindata < __rhs.bindata)
        {
            return true;
        }
        else if(__rhs.bindata < bindata)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const ResponseProtocol& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const ResponseProtocol& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const ResponseProtocol& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const ResponseProtocol& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

}

namespace transfer
{

class AMD_CallServer_SendMsg : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::transfer::ResponseProtocol&) = 0;
};

typedef ::IceUtil::Handle< ::transfer::AMD_CallServer_SendMsg> AMD_CallServer_SendMsgPtr;

class AMD_CallServer_QueryMsg : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::transfer::ResponseProtocol&) = 0;
};

typedef ::IceUtil::Handle< ::transfer::AMD_CallServer_QueryMsg> AMD_CallServer_QueryMsgPtr;

}

namespace IceAsync
{

namespace transfer
{

class AMD_CallServer_SendMsg : public ::transfer::AMD_CallServer_SendMsg, public ::IceInternal::IncomingAsync
{
public:

    AMD_CallServer_SendMsg(::IceInternal::Incoming&);

    virtual void ice_response(const ::transfer::ResponseProtocol&);
    virtual void ice_exception(const ::std::exception&);
#if defined(__BCPLUSPLUS__)
    // COMPILERFIX: Avoid compiler warnings with C++Builder 2010
    virtual void ice_exception()
    {
        ::IceInternal::IncomingAsync::ice_exception();
    }
#endif
};

class AMD_CallServer_QueryMsg : public ::transfer::AMD_CallServer_QueryMsg, public ::IceInternal::IncomingAsync
{
public:

    AMD_CallServer_QueryMsg(::IceInternal::Incoming&);

    virtual void ice_response(const ::transfer::ResponseProtocol&);
    virtual void ice_exception(const ::std::exception&);
#if defined(__BCPLUSPLUS__)
    // COMPILERFIX: Avoid compiler warnings with C++Builder 2010
    virtual void ice_exception()
    {
        ::IceInternal::IncomingAsync::ice_exception();
    }
#endif
};

}

}

namespace transfer
{

class Callback_CallServer_SendMsg_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CallServer_SendMsg_Base> Callback_CallServer_SendMsgPtr;

class Callback_CallServer_QueryMsg_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CallServer_QueryMsg_Base> Callback_CallServer_QueryMsgPtr;

class Callback_CallServer_ServerStatistic_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CallServer_ServerStatistic_Base> Callback_CallServer_ServerStatisticPtr;

}

namespace IceProxy
{

namespace transfer
{

class CallServer : virtual public ::IceProxy::Ice::Object
{
public:

    ::transfer::ResponseProtocol SendMsg(const ::transfer::RequestProtocol& req)
    {
        return SendMsg(req, 0);
    }
    ::transfer::ResponseProtocol SendMsg(const ::transfer::RequestProtocol& req, const ::Ice::Context& __ctx)
    {
        return SendMsg(req, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_SendMsg(const ::transfer::RequestProtocol& req)
    {
        return begin_SendMsg(req, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SendMsg(const ::transfer::RequestProtocol& req, const ::Ice::Context& __ctx)
    {
        return begin_SendMsg(req, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SendMsg(const ::transfer::RequestProtocol& req, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SendMsg(req, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SendMsg(const ::transfer::RequestProtocol& req, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SendMsg(req, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SendMsg(const ::transfer::RequestProtocol& req, const ::transfer::Callback_CallServer_SendMsgPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SendMsg(req, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SendMsg(const ::transfer::RequestProtocol& req, const ::Ice::Context& __ctx, const ::transfer::Callback_CallServer_SendMsgPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SendMsg(req, &__ctx, __del, __cookie);
    }

    ::transfer::ResponseProtocol end_SendMsg(const ::Ice::AsyncResultPtr&);
    
private:

    ::transfer::ResponseProtocol SendMsg(const ::transfer::RequestProtocol&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_SendMsg(const ::transfer::RequestProtocol&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::transfer::ResponseProtocol QueryMsg(const ::transfer::RequestProtocol& req)
    {
        return QueryMsg(req, 0);
    }
    ::transfer::ResponseProtocol QueryMsg(const ::transfer::RequestProtocol& req, const ::Ice::Context& __ctx)
    {
        return QueryMsg(req, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_QueryMsg(const ::transfer::RequestProtocol& req)
    {
        return begin_QueryMsg(req, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_QueryMsg(const ::transfer::RequestProtocol& req, const ::Ice::Context& __ctx)
    {
        return begin_QueryMsg(req, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_QueryMsg(const ::transfer::RequestProtocol& req, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QueryMsg(req, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_QueryMsg(const ::transfer::RequestProtocol& req, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QueryMsg(req, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_QueryMsg(const ::transfer::RequestProtocol& req, const ::transfer::Callback_CallServer_QueryMsgPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QueryMsg(req, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_QueryMsg(const ::transfer::RequestProtocol& req, const ::Ice::Context& __ctx, const ::transfer::Callback_CallServer_QueryMsgPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QueryMsg(req, &__ctx, __del, __cookie);
    }

    ::transfer::ResponseProtocol end_QueryMsg(const ::Ice::AsyncResultPtr&);
    
private:

    ::transfer::ResponseProtocol QueryMsg(const ::transfer::RequestProtocol&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_QueryMsg(const ::transfer::RequestProtocol&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::transfer::ByteSeq ServerStatistic()
    {
        return ServerStatistic(0);
    }
    ::transfer::ByteSeq ServerStatistic(const ::Ice::Context& __ctx)
    {
        return ServerStatistic(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_ServerStatistic()
    {
        return begin_ServerStatistic(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ServerStatistic(const ::Ice::Context& __ctx)
    {
        return begin_ServerStatistic(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ServerStatistic(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ServerStatistic(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ServerStatistic(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ServerStatistic(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ServerStatistic(const ::transfer::Callback_CallServer_ServerStatisticPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ServerStatistic(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ServerStatistic(const ::Ice::Context& __ctx, const ::transfer::Callback_CallServer_ServerStatisticPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ServerStatistic(&__ctx, __del, __cookie);
    }

    ::transfer::ByteSeq end_ServerStatistic(const ::Ice::AsyncResultPtr&);
    
private:

    ::transfer::ByteSeq ServerStatistic(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_ServerStatistic(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<CallServer> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CallServer*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<CallServer*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CallServer> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CallServer*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<CallServer*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CallServer> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CallServer*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<CallServer*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CallServer> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CallServer*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<CallServer*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CallServer> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CallServer*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<CallServer*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CallServer> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CallServer*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<CallServer*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CallServer> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CallServer*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<CallServer*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CallServer> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CallServer*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<CallServer*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CallServer> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CallServer*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<CallServer*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CallServer> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CallServer*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<CallServer*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CallServer> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CallServer*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<CallServer*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CallServer> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CallServer*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<CallServer*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CallServer> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CallServer*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<CallServer*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CallServer> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CallServer*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<CallServer*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CallServer> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CallServer*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<CallServer*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CallServer> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CallServer*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<CallServer*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CallServer> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CallServer*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<CallServer*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CallServer> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CallServer*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<CallServer*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CallServer> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CallServer*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<CallServer*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace transfer
{

class CallServer : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::transfer::ResponseProtocol SendMsg(const ::transfer::RequestProtocol&, const ::Ice::Context*) = 0;

    virtual ::transfer::ResponseProtocol QueryMsg(const ::transfer::RequestProtocol&, const ::Ice::Context*) = 0;

    virtual ::transfer::ByteSeq ServerStatistic(const ::Ice::Context*) = 0;
};

}

}

namespace IceDelegateM
{

namespace transfer
{

class CallServer : virtual public ::IceDelegate::transfer::CallServer,
                   virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::transfer::ResponseProtocol SendMsg(const ::transfer::RequestProtocol&, const ::Ice::Context*);

    virtual ::transfer::ResponseProtocol QueryMsg(const ::transfer::RequestProtocol&, const ::Ice::Context*);

    virtual ::transfer::ByteSeq ServerStatistic(const ::Ice::Context*);
};

}

}

namespace IceDelegateD
{

namespace transfer
{

class CallServer : virtual public ::IceDelegate::transfer::CallServer,
                   virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::transfer::ResponseProtocol SendMsg(const ::transfer::RequestProtocol&, const ::Ice::Context*);

    virtual ::transfer::ResponseProtocol QueryMsg(const ::transfer::RequestProtocol&, const ::Ice::Context*);

    virtual ::transfer::ByteSeq ServerStatistic(const ::Ice::Context*);
};

}

}

namespace transfer
{

class CallServer : virtual public ::Ice::Object
{
public:

    typedef CallServerPrx ProxyType;
    typedef CallServerPtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void SendMsg_async(const ::transfer::AMD_CallServer_SendMsgPtr&, const ::transfer::RequestProtocol&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___SendMsg(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void QueryMsg_async(const ::transfer::AMD_CallServer_QueryMsgPtr&, const ::transfer::RequestProtocol&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___QueryMsg(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::transfer::ByteSeq ServerStatistic(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___ServerStatistic(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const CallServer& l, const CallServer& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const CallServer& l, const CallServer& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace transfer
{

template<class T>
class CallbackNC_CallServer_SendMsg : public Callback_CallServer_SendMsg_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::transfer::ResponseProtocol&);

    CallbackNC_CallServer_SendMsg(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::transfer::CallServerPrx __proxy = ::transfer::CallServerPrx::uncheckedCast(__result->getProxy());
        ::transfer::ResponseProtocol __ret;
        try
        {
            __ret = __proxy->end_SendMsg(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_CallServer_SendMsgPtr
newCallback_CallServer_SendMsg(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::transfer::ResponseProtocol&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CallServer_SendMsg<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CallServer_SendMsgPtr
newCallback_CallServer_SendMsg(T* instance, void (T::*cb)(const ::transfer::ResponseProtocol&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CallServer_SendMsg<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_CallServer_SendMsg : public Callback_CallServer_SendMsg_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::transfer::ResponseProtocol&, const CT&);

    Callback_CallServer_SendMsg(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::transfer::CallServerPrx __proxy = ::transfer::CallServerPrx::uncheckedCast(__result->getProxy());
        ::transfer::ResponseProtocol __ret;
        try
        {
            __ret = __proxy->end_SendMsg(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_CallServer_SendMsgPtr
newCallback_CallServer_SendMsg(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::transfer::ResponseProtocol&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CallServer_SendMsg<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CallServer_SendMsgPtr
newCallback_CallServer_SendMsg(T* instance, void (T::*cb)(const ::transfer::ResponseProtocol&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CallServer_SendMsg<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_CallServer_QueryMsg : public Callback_CallServer_QueryMsg_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::transfer::ResponseProtocol&);

    CallbackNC_CallServer_QueryMsg(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::transfer::CallServerPrx __proxy = ::transfer::CallServerPrx::uncheckedCast(__result->getProxy());
        ::transfer::ResponseProtocol __ret;
        try
        {
            __ret = __proxy->end_QueryMsg(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_CallServer_QueryMsgPtr
newCallback_CallServer_QueryMsg(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::transfer::ResponseProtocol&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CallServer_QueryMsg<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CallServer_QueryMsgPtr
newCallback_CallServer_QueryMsg(T* instance, void (T::*cb)(const ::transfer::ResponseProtocol&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CallServer_QueryMsg<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_CallServer_QueryMsg : public Callback_CallServer_QueryMsg_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::transfer::ResponseProtocol&, const CT&);

    Callback_CallServer_QueryMsg(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::transfer::CallServerPrx __proxy = ::transfer::CallServerPrx::uncheckedCast(__result->getProxy());
        ::transfer::ResponseProtocol __ret;
        try
        {
            __ret = __proxy->end_QueryMsg(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_CallServer_QueryMsgPtr
newCallback_CallServer_QueryMsg(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::transfer::ResponseProtocol&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CallServer_QueryMsg<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CallServer_QueryMsgPtr
newCallback_CallServer_QueryMsg(T* instance, void (T::*cb)(const ::transfer::ResponseProtocol&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CallServer_QueryMsg<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_CallServer_ServerStatistic : public Callback_CallServer_ServerStatistic_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::transfer::ByteSeq&);

    CallbackNC_CallServer_ServerStatistic(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::transfer::CallServerPrx __proxy = ::transfer::CallServerPrx::uncheckedCast(__result->getProxy());
        ::transfer::ByteSeq __ret;
        try
        {
            __ret = __proxy->end_ServerStatistic(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_CallServer_ServerStatisticPtr
newCallback_CallServer_ServerStatistic(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::transfer::ByteSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CallServer_ServerStatistic<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CallServer_ServerStatisticPtr
newCallback_CallServer_ServerStatistic(T* instance, void (T::*cb)(const ::transfer::ByteSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CallServer_ServerStatistic<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_CallServer_ServerStatistic : public Callback_CallServer_ServerStatistic_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::transfer::ByteSeq&, const CT&);

    Callback_CallServer_ServerStatistic(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::transfer::CallServerPrx __proxy = ::transfer::CallServerPrx::uncheckedCast(__result->getProxy());
        ::transfer::ByteSeq __ret;
        try
        {
            __ret = __proxy->end_ServerStatistic(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_CallServer_ServerStatisticPtr
newCallback_CallServer_ServerStatistic(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::transfer::ByteSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CallServer_ServerStatistic<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CallServer_ServerStatisticPtr
newCallback_CallServer_ServerStatistic(T* instance, void (T::*cb)(const ::transfer::ByteSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CallServer_ServerStatistic<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
